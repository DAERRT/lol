@{
    Layout = null;
    var chats = ViewBag.Chats as List<lol.Models.Chat>;
    var userId = ViewBag.UserId as string;
}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            background: #f8f9fa;
        }
        .messenger-root {
            display: flex;
            height: 80vh;
            width: 100vw;
            max-height: 80vh;
            background: #fff;
            border-radius: 18px;
            box-shadow: 0 4px 32px #0001;
            overflow: hidden;
        }
        .sidebar {
            width: 320px;
            background: #f1f3f6;
            color: #222;
            overflow-y: auto;
            border-right: 1px solid #e0e0e0;
            z-index: 2;
        }
        .main-content {
            flex: 1;
            background: #fff;
            display: flex;
            flex-direction: column;
            min-width: 0;
        }
        .sidebar-header { background: #f1f3f6; color: #222; font-size: 1.2em; font-weight: bold; padding: 24px 24px 12px 24px; }
        .chat-list { padding: 0; }
        .chat-list-item { border-bottom: 1px solid #ececec; color: #222; transition: background 0.2s; display: flex; align-items: center; padding: 12px 24px; text-decoration: none; background: #f1f3f6; }
        .chat-list-item:hover, .chat-list-item.active { background: #e6eaff; }
        .chat-list-item .fw-bold { font-size: 1.1em; }
        .chat-list-item img { width: 44px; height: 44px; border-radius: 50%; object-fit: cover; margin-right: 16px; }
        .chat-list-item .flex-grow-1 { min-width: 0; }
        .chat-list-item .text-truncate { max-width: 180px; }
        .chat-list-item .small { font-size: 0.9em; }
        .chat-list-item.active {
            background: #6c47ff11 !important;
            color: #6c47ff !important;
            box-shadow: 0 2px 8px #6c47ff11;
        }
        .chat-list-item.active .fw-bold,
        .chat-list-item.active .text-muted {
            color: #6c47ff !important;
        }
    </style>
    @RenderSection("Styles", required: false)
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-controller="Home" asp-action="Index">Портал ВШЦТ</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-controller="Home" asp-action="Index">Главная</a>
                        </li>
                    </ul>
                    <ul class="navbar-nav">
                        @if (User.Identity?.IsAuthenticated == true)
                        {
                            @if (User.IsInRole("Администратор"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Admin" asp-action="Index">Админ-панель</a>
                                </li>
                            }
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Profile" asp-action="Index">Личный кабинет</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Team" asp-action="Index">Команды</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Project" asp-action="Index">Проекты</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="PublicExchange" asp-action="Index">Биржи проектов</a>
                            </li>
                            @if (User.IsInRole("Эксперт"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="ExpertReview" asp-action="Index">Оценка проектов</a>
                                </li>
                            }
                            @if (User.IsInRole("Тимлид"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="ProjectApplication" asp-action="MyApplications">Мои заявки</a>
                                </li>
                            }
                            @if (User.IsInRole("Заказчик"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="ProjectApplication" asp-action="Moderation">Модерация заявок</a>
                                </li>
                            }
                            <li class="nav-item position-relative">
                                <a class="nav-link text-dark" href="#" id="notificationDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span class="bi bi-bell" style="font-size: 1.5rem;"></span>
                                    <span id="notificationCount" class="badge bg-danger position-absolute top-0 start-100 translate-middle" style="display:none;">0</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="notificationDropdown" style="min-width: 350px; max-width: 400px;">
                                    <li id="notificationList">
                                        <span class="dropdown-item-text">Загрузка...</span>
                                    </li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <form id="clearAllNotificationsForm" asp-controller="Notification" asp-action="ClearAll" method="post" style="display:inline;">
                                            <button type="submit" class="dropdown-item text-danger text-center">Очистить все</button>
                                        </form>
                                    </li>
                                    <li><a class="dropdown-item text-center" href="/Notification/Index">Все уведомления</a></li>
                                </ul>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Chat" asp-action="Index" title="Чаты">
                                    <span class="bi bi-chat-dots" style="font-size: 1.5rem;"></span>
                                </a>
                            </li>
                            <li class="nav-item">
                                <span class="nav-link text-dark">
                                    @User.Identity.Name
                                    @{
                                        var roles = User.Claims.Where(c => c.Type == System.Security.Claims.ClaimTypes.Role).Select(c => c.Value);
                                        if (roles.Any())
                                        {
                                            <small class="text-muted">(@string.Join(", ", roles))</small>
                                        }
                                    }
                                </span>
                            </li>
                            <li class="nav-item">
                                <form asp-controller="Account" asp-action="Logout" method="post">
                                    <button type="submit" class="btn btn-link nav-link text-dark">Выйти</button>
                                </form>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Account" asp-action="Login">Войти</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Account" asp-action="Register">Регистрация</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="messenger-root">
        <div class="sidebar">
            @await Html.PartialAsync("~/Views/Chat/_ChatListPartial.cshtml", chats)
        </div>
        <div class="main-content">
            @RenderBody()
        </div>
    </div>
    <!-- Модальное окно создания чата (перенесено из partial) -->
    <div class="modal fade" id="createChatModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Создать чат</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Тип чата:</label>
                        <div>
                            <input type="radio" name="chatType" id="privateType" value="private" checked>
                            <label for="privateType">Личный</label>
                            <input type="radio" name="chatType" id="groupType" value="group" class="ms-3">
                            <label for="groupType">Групповой</label>
                        </div>
                    </div>
                    <form id="createPrivateChatForm" style="display:block;">
                        <label class="form-label">Пользователь:</label>
                        <input type="text" id="privateUserSearch" class="form-control mb-2" placeholder="Поиск пользователя..." autocomplete="off" />
                        <div id="privateUserResults" class="list-group mb-2"></div>
                        <input type="hidden" id="privateUserId" name="userId" />
                        <button type="submit" class="btn btn-primary w-100">Создать личный чат</button>
                    </form>
                    <form id="createGroupChatForm" style="display:none;">
                        <label class="form-label">Название группы:</label>
                        <input type="text" id="groupName" name="name" class="form-control mb-2" required />
                        <label class="form-label">Участники:</label>
                        <input type="text" id="groupUserSearch" class="form-control mb-2" placeholder="Поиск пользователя..." autocomplete="off" />
                        <div id="groupUserResults" class="list-group mb-2"></div>
                        <div id="groupSelectedUsers" class="mb-2"></div>
                        <button type="submit" class="btn btn-primary w-100">Создать групповой чат</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - Портал ВШЦТ
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        // Открытие модалки
        document.addEventListener('DOMContentLoaded', function() {
            const createChatBtn = document.getElementById('createChatBtn');
            const createChatModal = document.getElementById('createChatModal');
            if (createChatBtn && createChatModal) {
                createChatBtn.addEventListener('click', function() {
                    var modal = new bootstrap.Modal(createChatModal);
                    modal.show();
                });
            }
            // Переключение типа чата
            document.querySelectorAll('input[name="chatType"]').forEach(function(radio) {
                radio.addEventListener('change', function() {
                    document.getElementById('createPrivateChatForm').style.display = document.getElementById('privateType').checked ? 'block' : 'none';
                    document.getElementById('createGroupChatForm').style.display = document.getElementById('groupType').checked ? 'block' : 'none';
                });
            });
            // Поиск пользователя для личного чата
            const privateUserSearch = document.getElementById('privateUserSearch');
            const privateUserResults = document.getElementById('privateUserResults');
            if (privateUserSearch && privateUserResults) {
                privateUserSearch.addEventListener('input', function() {
                    const query = this.value;
                    if (!query) { privateUserResults.innerHTML = ''; return; }
                    fetch('/Chat/SearchUsers?query=' + encodeURIComponent(query))
                        .then(r => r.json())
                        .then(data => {
                            let html = '';
                            data.forEach(function(u) {
                                html += `<button type="button" class="list-group-item list-group-item-action" data-id="${u.id}">${u.firstName} ${u.lastName} (${u.userName})</button>`;
                            });
                            privateUserResults.innerHTML = html;
                        });
                });
                privateUserResults.addEventListener('click', function(e) {
                    if (e.target.tagName === 'BUTTON') {
                        document.getElementById('privateUserId').value = e.target.getAttribute('data-id');
                        privateUserSearch.value = e.target.textContent;
                        privateUserResults.innerHTML = '';
                    }
                });
            }
            // Отправка формы личного чата
            const createPrivateChatForm = document.getElementById('createPrivateChatForm');
            if (createPrivateChatForm) {
                createPrivateChatForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    const userId = document.getElementById('privateUserId').value;
                    if (!userId) return;
                    fetch('/Chat/CreatePrivate', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: 'userId=' + encodeURIComponent(userId)
                    })
                    .then(r => r.url ? window.location.href = r.url : window.location.reload());
                });
            }
            // Поиск и выбор участников для группы
            let groupUsers = [];
            const groupUserSearch = document.getElementById('groupUserSearch');
            const groupUserResults = document.getElementById('groupUserResults');
            const groupSelectedUsers = document.getElementById('groupSelectedUsers');
            if (groupUserSearch && groupUserResults && groupSelectedUsers) {
                groupUserSearch.addEventListener('input', function() {
                    const query = this.value;
                    if (!query) { groupUserResults.innerHTML = ''; return; }
                    fetch('/Chat/SearchUsers?query=' + encodeURIComponent(query))
                        .then(r => r.json())
                        .then(data => {
                            let html = '';
                            data.forEach(function(u) {
                                if (!groupUsers.includes(u.id))
                                    html += `<button type="button" class="list-group-item list-group-item-action" data-id="${u.id}">${u.firstName} ${u.lastName} (${u.userName})</button>`;
                            });
                            groupUserResults.innerHTML = html;
                        });
                });
                groupUserResults.addEventListener('click', function(e) {
                    if (e.target.tagName === 'BUTTON') {
                        const id = e.target.getAttribute('data-id');
                        const name = e.target.textContent;
                        if (!groupUsers.includes(id)) {
                            groupUsers.push(id);
                            groupSelectedUsers.insertAdjacentHTML('beforeend', `<span class="badge bg-primary me-1 mb-1" data-id="${id}">${name} <span style="cursor:pointer;" class="remove-user">&times;</span></span>`);
                        }
                        groupUserResults.innerHTML = '';
                        groupUserSearch.value = '';
                    }
                });
                groupSelectedUsers.addEventListener('click', function(e) {
                    if (e.target.classList.contains('remove-user')) {
                        const id = e.target.parentElement.getAttribute('data-id');
                        groupUsers = groupUsers.filter(u => u !== id);
                        e.target.parentElement.remove();
                    }
                });
            }
            // Отправка формы группового чата
            const createGroupChatForm = document.getElementById('createGroupChatForm');
            if (createGroupChatForm) {
                createGroupChatForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    const name = document.getElementById('groupName').value;
                    if (!name || groupUsers.length === 0) return;
                    const formData = new URLSearchParams();
                    formData.append('name', name);
                    groupUsers.forEach(u => formData.append('userIds', u));
                    fetch('/Chat/CreateGroup', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/x-www-form-urlencoded' },
                        body: formData.toString()
                    })
                    .then(r => r.url ? window.location.href = r.url : window.location.reload());
                });
            }
        });
    </script>
    @RenderSection("Scripts", required: false)
</body>
</html> 