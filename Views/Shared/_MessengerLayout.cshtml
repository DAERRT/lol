@{
    Layout = null;
    var chats = ViewBag.Chats as List<lol.Models.Chat>;
    var userId = ViewBag.UserId as string;
}
<!DOCTYPE html>
<html lang="ru">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.min.css" />
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css">
    <style>
        html, body {
            height: 100%;
            margin: 0;
            padding: 0;
            background: #f8f9fa;
        }
        .messenger-root {
            display: flex;
            height: 80vh;
            width: 100vw;
            max-height: 80vh;
            background: #fff;
            border-radius: 18px;
            box-shadow: 0 4px 32px #0001;
            overflow: hidden;
        }
        .sidebar {
            width: 320px;
            background: #f1f3f6;
            color: #222;
            overflow-y: auto;
            border-right: 1px solid #e0e0e0;
            z-index: 2;
        }
        .main-content {
            flex: 1;
            background: #fff;
            display: flex;
            flex-direction: column;
            min-width: 0;
        }
        .sidebar-header { background: #f1f3f6; color: #222; font-size: 1.2em; font-weight: bold; padding: 24px 24px 12px 24px; }
        .chat-list { padding: 0; }
        .chat-list-item { border-bottom: 1px solid #ececec; color: #222; transition: background 0.2s; display: flex; align-items: center; padding: 12px 24px; text-decoration: none; background: #f1f3f6; }
        .chat-list-item:hover, .chat-list-item.active { background: #e6eaff; }
        .chat-list-item .fw-bold { font-size: 1.1em; }
        .chat-list-item img { width: 44px; height: 44px; border-radius: 50%; object-fit: cover; margin-right: 16px; }
        .chat-list-item .flex-grow-1 { min-width: 0; }
        .chat-list-item .text-truncate { max-width: 180px; }
        .chat-list-item .small { font-size: 0.9em; }
        .chat-list-item.active {
            background: #6c47ff11 !important;
            color: #6c47ff !important;
            box-shadow: 0 2px 8px #6c47ff11;
        }
        .chat-list-item.active .fw-bold,
        .chat-list-item.active .text-muted {
            color: #6c47ff !important;
        }
    </style>
    @RenderSection("Styles", required: false)
</head>
<body>
    <header>
        <nav class="navbar navbar-expand-sm navbar-toggleable-sm navbar-light bg-white border-bottom box-shadow mb-3">
            <div class="container">
                <a class="navbar-brand" asp-controller="Home" asp-action="Index">Портал ВШЦТ</a>
                <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target=".navbar-collapse">
                    <span class="navbar-toggler-icon"></span>
                </button>
                <div class="navbar-collapse collapse d-sm-inline-flex justify-content-between">
                    <ul class="navbar-nav flex-grow-1">
                        <li class="nav-item">
                            <a class="nav-link text-dark" asp-controller="Home" asp-action="Index">Главная</a>
                        </li>
                    </ul>
                    <ul class="navbar-nav">
                        @if (User.Identity?.IsAuthenticated == true)
                        {
                            @if (User.IsInRole("Администратор"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Admin" asp-action="Index">Админ-панель</a>
                                </li>
                            }
                            @if (ViewBag.HasKanbanAccess == true)
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="Kanban" asp-action="Index">Канбан-доска</a>
                                </li>
                            }
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Profile" asp-action="Index">Личный кабинет</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Team" asp-action="Index">Команды</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Project" asp-action="Index">Проекты</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="PublicExchange" asp-action="Index">Биржи проектов</a>
                            </li>
                            @if (User.IsInRole("Эксперт"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="ExpertReview" asp-action="Index">Оценка проектов</a>
                                </li>
                            }
                            @if (User.IsInRole("Тимлид"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="ProjectApplication" asp-action="MyApplications">Мои заявки</a>
                                </li>
                            }
                            @if (User.IsInRole("Заказчик"))
                            {
                                <li class="nav-item">
                                    <a class="nav-link text-dark" asp-controller="ProjectApplication" asp-action="Moderation">Модерация заявок</a>
                                </li>
                            }
                            <li class="nav-item position-relative">
                                <a class="nav-link text-dark" href="#" id="notificationDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                    <span class="bi bi-bell" style="font-size: 1.5rem;"></span>
                                    <span id="notificationCount" class="badge bg-danger position-absolute top-0 start-100 translate-middle" style="display:none;">0</span>
                                </a>
                                <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="notificationDropdown" style="min-width: 350px; max-width: 400px;">
                                    <li id="notificationList">
                                        <span class="dropdown-item-text">Загрузка...</span>
                                    </li>
                                    <li><hr class="dropdown-divider"></li>
                                    <li>
                                        <form id="clearAllNotificationsForm" asp-controller="Notification" asp-action="ClearAll" method="post" style="display:inline;">
                                            <button type="submit" class="dropdown-item text-danger text-center">Очистить все</button>
                                        </form>
                                    </li>
                                    <li><a class="dropdown-item text-center" href="/Notification/Index">Все уведомления</a></li>
                                </ul>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Chat" asp-action="Index" title="Чаты">
                                    <span class="bi bi-chat-dots" style="font-size: 1.5rem;"></span>
                                </a>
                            </li>
                            <li class="nav-item">
                                <span class="nav-link text-dark">
                                    @User.Identity.Name
                                    @{
                                        var roles = User.Claims.Where(c => c.Type == System.Security.Claims.ClaimTypes.Role).Select(c => c.Value);
                                        if (roles.Any())
                                        {
                                            <small class="text-muted">(@string.Join(", ", roles))</small>
                                        }
                                    }
                                </span>
                            </li>
                            <li class="nav-item">
                                <form asp-controller="Account" asp-action="Logout" method="post">
                                    <button type="submit" class="btn btn-link nav-link text-dark">Выйти</button>
                                </form>
                            </li>
                        }
                        else
                        {
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Account" asp-action="Login">Войти</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link text-dark" asp-controller="Account" asp-action="Register">Регистрация</a>
                            </li>
                        }
                    </ul>
                </div>
            </div>
        </nav>
    </header>
    <div class="messenger-root">
        <div class="sidebar">
            @await Html.PartialAsync("~/Views/Chat/_ChatListPartial.cshtml", chats)
        </div>
        <div class="main-content">
            @RenderBody()
        </div>
    </div>
    <!-- Модальное окно создания чата (перенесено из partial) -->
    <div class="modal fade" id="createChatModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Создать чат</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
                </div>
                <div class="modal-body">
                    <div class="mb-3">
                        <label class="form-label">Тип чата:</label>
                        <div>
                            <input type="radio" name="chatType" id="privateType" value="private" checked>
                            <label for="privateType">Личный</label>
                            <input type="radio" name="chatType" id="groupType" value="group" class="ms-3">
                            <label for="groupType">Групповой</label>
                        </div>
                    </div>
                    <form id="createPrivateChatForm" style="display:block;">
                        <label class="form-label">Пользователь:</label>
                        <input type="text" id="privateUserSearch" class="form-control mb-2" placeholder="Поиск пользователя..." autocomplete="off" />
                        <div id="privateUserResults" class="list-group mb-2"></div>
                        <input type="hidden" id="privateUserId" name="userId" />
                        <button type="submit" class="btn btn-primary w-100">Создать личный чат</button>
                    </form>
                    <form id="createGroupChatForm" style="display:none;">
                        <label class="form-label">Название группы:</label>
                        <input type="text" id="groupName" name="name" class="form-control mb-2" required />
                        <label class="form-label">Участники:</label>
                        <input type="text" id="groupUserSearch" class="form-control mb-2" placeholder="Поиск пользователя..." autocomplete="off" />
                        <div id="groupUserResults" class="list-group mb-2"></div>
                        <div id="groupSelectedUsers" class="mb-2"></div>
                        <button type="submit" class="btn btn-primary w-100">Создать групповой чат</button>
                    </form>
                </div>
            </div>
        </div>
    </div>
    <footer class="border-top footer text-muted">
        <div class="container">
            &copy; 2024 - Портал ВШЦТ
        </div>
    </footer>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/7.0.5/signalr.min.js"></script>
    <script>
    // Глобальное подключение SignalR для мессенджера
    window.connection = new signalR.HubConnectionBuilder()
        .withUrl("/chatHub")
        .build();
    window.connection.start().then(function () {
        console.log('SignalR connection started');
    });
    // --- badge и SignalR обработчики ---
    function loadNotifications() {
        $.get('/Notification/GetUserNotifications', function (data) {
            let unreadCount = data.filter(n => !n.isRead).length;
            if (unreadCount > 0) {
                $('#notificationCount').text(unreadCount).show();
            } else {
                $('#notificationCount').hide();
            }
            let list = '';
            if (data.length === 0) {
                list = '<span class="dropdown-item-text">У вас нет уведомлений.</span>';
            } else {
                data.slice(0, 5).forEach(function (n) {
                    list += `
                        <div class="dropdown-item${n.isRead ? '' : ' fw-bold'}" style="white-space:normal; border-bottom:1px solid #f0f0f0; padding:8px 16px;">
                            <div>${n.message}</div>
                            <div class="text-muted small">${new Date(n.createdAt).toLocaleString()}</div>
                        </div>
                    `;
                });
            }
            $('#notificationList').html(list);
        });
    }

    $(document).ready(function () {
        // Загрузка при открытии дропдауна
        $('#notificationDropdown').on('click', function () {
            loadNotifications();
        });
        // Периодическая проверка (например, каждые 60 секунд)
        setInterval(loadNotifications, 60000);
        // Первая загрузка
        loadNotifications();
    });

    const connection1 = new signalR.HubConnectionBuilder()
        .withUrl("/notificationHub")
        .build();

    connection1.on("ReceiveNotification", function (message) {
        console.log("Получено уведомление через SignalR:", message);
        loadNotifications();
        if (typeof loadNotificationsFull === 'function') {
            loadNotificationsFull();
        }
        // Показываем браузерное уведомление
        if (window.Notification && Notification.permission === "granted") {
            new Notification("Уведомление", {
                body: message,
                icon: "/favicon.ico"
            });
        }
    });

    connection1.start().catch(function (err) {
        return console.error(err.toString());
    });

    if (window.Notification && Notification.permission !== "granted") {
        Notification.requestPermission();
    }
    // --- badge и SignalR обработчики для чатов ---
    function updateAllUnreadBadges() {
        console.log('Вызвана updateAllUnreadBadges из layout');
        var $items = $(".chat-list-item");
        console.log('Найдено чатов:', $items.length);
        $items.each(function() {
            const chatId = $(this).attr("href") ? $(this).attr("href").split("chatId=")[1] : null;
            const $item = $(this);
            if (!chatId) {
                console.log('Не удалось получить chatId для элемента', this);
                return;
            }
            console.log('Запрашиваю непрочитанные для чата', chatId);
            $.get(`/Chat/GetUnreadCount?chatId=${chatId}`, function(data) {
                let badge = $item.find('.unread-badge');
                if (data.count > 0) {
                    if (badge.length === 0) {
                        badge = $("<span class='badge bg-danger unread-badge ms-2'></span>");
                        $item.find('.text-end').append(badge);
                    }
                    badge.text(data.count).show();
                    console.log('Показан badge для чата', chatId, 'count:', data.count);
                } else {
                    badge.hide();
                    console.log('Скрыт badge для чата', chatId);
                }
            });
        });
    }
    $(document).ready(function() {
        setTimeout(updateAllUnreadBadges, 100);
    });
    // SignalR обработчик для NotifyUnreadCountChanged
    window.connection.on("NotifyUnreadCountChanged", function(chatId) {
        console.log('Получено событие NotifyUnreadCountChanged для чата', chatId);
        window.connection.invoke("NotifyUnreadCountChanged", chatId);
    });
    window.connection.on("UpdateUnreadCount", function(chatId, count) {
        console.log('Получено событие UpdateUnreadCount для чата', chatId, 'count:', count);
        const $item = $(`.chat-list-item[href*="chatId=${chatId}"]`);
        let badge = $item.find('.unread-badge');
        if (count > 0) {
            if (badge.length === 0) {
                badge = $("<span class='badge bg-danger unread-badge ms-2'></span>");
                $item.find('.text-end').append(badge);
            }
            badge.text(count).show();
        } else {
            badge.hide();
        }
    });
    window.connection.on("ReceiveMessage", function (msgChatId, msgUserId, message) {
        // Если мы находимся в этом чате
        if (typeof chatId !== 'undefined' && msgChatId == chatId) {
            // Сразу отмечаем все видимые сообщения как прочитанные
            if (typeof markVisibleMessagesAsRead === 'function') {
                markVisibleMessagesAsRead();
            }
            // Мгновенно скрываем badge для текущего чата
            const $item = $(`.chat-list-item[href*="chatId=${chatId}"]`);
            $item.find('.unread-badge').hide();
        }
    });
    // Глобальный обработчик для плавающей кнопки создания чата
    $(document).on('click', '#createChatBtn', function() {
        $('#createChatModal').modal('show');
    });
    // Глобальный обработчик для поиска пользователей в модальном окне создания чата
    $(document).on('input', '#privateUserSearch', function() {
        const query = $(this).val();
        if (!query) { $('#privateUserResults').empty(); return; }
        $.get('/Chat/SearchUsers', { query: query }, function(data) {
            let html = '';
            data.forEach(function(u) {
                html += `<button type="button" class="list-group-item list-group-item-action" data-id="${u.id}">${u.firstName} ${u.lastName} (${u.userName})</button>`;
            });
            $('#privateUserResults').html(html);
        });
    });
    $(document).on('click', '#privateUserResults button', function() {
        $('#privateUserId').val($(this).data('id'));
        $('#privateUserSearch').val($(this).text());
        $('#privateUserResults').empty();
    });
    </script>
    @RenderSection("Scripts", required: false)
</body>
</html>
